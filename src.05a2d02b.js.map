{"version":3,"sources":["index.js"],"names":["delay","ms","Promise","resolved","setTimeout","logger","time","console","log","then","geTime","result"],"mappings":";;;AAwGA,aAxGA,QAAA,oBAIA,MAAMA,EAASC,GACJ,IAAIC,QAAQC,IACfC,WAAW,IAAKD,EAASF,GAAKA,KAI9BI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GAGjB,MAAMK,EAAS,MAAA,IACPC,MAAAA,QAAeX,EAAMM,GAC3BC,QAAQC,sBAAsBG,QAGhCD,EAAO,KACPA,EAAO,MACPA,EAAO","file":"src.05a2d02b.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n// ЗАВДАННЯ 1\n\nconst delay = (ms) => {\n    return new Promise(resolved =>{\n        setTimeout(()=> resolved(ms), ms)\n    })\n  };\n  \n  const logger = time => console.log(`Resolved after ${time}ms`);\n  \n  // Вызовы функции для проверки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms\n\n\n  const geTime = async (time) =>{\n    const result = await delay(time)\n    console.log(`Resolved after ${result}ms`)\n  }\n\n  geTime(3000);\n  geTime(3500);\n  geTime(4000);\n\n\n\n// ЗАВДАННЯ 2\n\n// const users = [\n//     { name: 'Mango', active: true },\n//     { name: 'Poly', active: false },\n//     { name: 'Ajax', active: true },\n//     { name: 'Lux', active: false },\n//   ];\n  \n//   const toggleUserState = (allUsers, userName) => {\n//     const updatedUsers = allUsers.map(user =>\n//       user.name === userName ? { ...user, active: !user.active } : user,\n//     );\n  \n//     return new Promise((resolve, reject) => {\n//         resolve(updatedUsers)\n//     })\n//   };\n  \n//   const logger = (updatedUsers) => console.table(updatedUsers);\n \n\n//   toggleUserState(users, 'Mango').then(logger);\n//   toggleUserState(users, 'Lux').then(logger);\n\n\n// ЗАВДАННЯ 3\n\n// const randomIntegerFromInterval = (min, max) => {\n//     return Math.floor(Math.random() * (max - min + 1) + min);\n//   };\n\n  \n//   const makeTransaction = (transaction) => {\n      \n//       const delay = randomIntegerFromInterval(200, 500);\n//       return new Promise((resolve, reject) => {\n\n//         setTimeout(() => {\n//             const canProcess = Math.random() > 0.3;\n        \n//             if (canProcess) {\n//                 resolve([transaction.id, delay]);\n//             } \n//                 reject(transaction.id);\n\n//           }, delay);\n//              })\n//   };\n  \n//   const logSuccess = ([id, time]) => {\n//     console.log(`Transaction ${id} processed in ${time}ms`);\n//   };\n  \n//   const logError = id => {\n//     console.warn(`Error processing transaction ${id}. Please try again later.`);\n//   };\n  \n\n\n\n//   makeTransaction({ id: 70, amount: 150 })\n//     .then(logSuccess)\n//     .catch(logError);\n  \n//   makeTransaction({ id: 71, amount: 230 })\n//     .then(logSuccess)\n//     .catch(logError);\n  \n//   makeTransaction({ id: 72, amount: 75 })\n//     .then(logSuccess)\n//     .catch(logError);\n  \n//   makeTransaction({ id: 73, amount: 100 })\n//     .then(logSuccess)\n//     .catch(logError);"]}